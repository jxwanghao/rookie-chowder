<?xml version="1.0" encoding="UTF-8"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="classpath:schema/ehcache.xsd" 
	updateCheck="false"
	monitoring="off" 
	dynamicConfig="false" >
	<diskStore path="java.io.tmpdir" />
<!-- 
	主要特性:
	1. 快速.
	2. 简单.
	3. 多种缓存策略
	4. 缓存数据有两级：内存和磁盘，因此无需担心容量问题
	5. 缓存数据会在虚拟机重启的过程中写入磁盘
	6. 可以通过RMI、可插入API等方式进行分布式缓存
	7. 具有缓存和缓存管理器的侦听接口
	8. 支持多缓存管理器实例，以及一个实例的多个缓存区域
	9. 提供Hibernate的缓存实现

<cache>元素的属性 
	name：缓存名称。通常为缓存对象的类名（非严格标准）。 
	maxEntriesLocalHeap : 设置缓存在本地内存中最大缓存项数量（0 表示无限）。（等效于旧版本中的maxElementsInMemory属性）
	maxElementsInMemory：设置基于内存的缓存可存放对象的最大数目。 
	maxElementsOnDisk：设置基于硬盘的缓存可存放对象的最大数目。  
	eternal：如果为true，表示对象永远不会过期，此时会忽略timeToIdleSeconds和timeToLiveSeconds属性，默认为false; 
	timeToIdleSeconds： 设定允许对象处于空闲状态的最长时间，以秒为单位。当对象自从最近一次被访问后，如果处于空闲状态的时间超过了timeToIdleSeconds属性值，这个对象就会过期。当对象过期，EHCache将把它从缓存中清空。只有当eternal属性为false，该属性才有效。如果该属性值为0，则表示对象可以无限期地处于空闲状态。 
	timeToLiveSeconds：设定对象允许存在于缓存中的最长时间，以秒为单位。当对象自从被存放到缓存中后，如果处于缓存中的时间超过了 timeToLiveSeconds属性值，这个对象就会过期。当对象过期，EHCache将把它从缓存中清除。只有当eternal属性为false，该属性才有效。如果该属性值为0，则表示对象可以无限期地存在于缓存中。timeToLiveSeconds必须大于timeToIdleSeconds属性，才有意义。 
	overflowToDisk：如果为true,表示当基于内存的缓存中的对象数目达到了maxElementsInMemory界限后，会把益出的对象写到基于硬盘的缓存中。注意：如果缓存的对象要写入到硬盘中的话，则该对象必须实现了Serializable接口才行。
	diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。
	diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。 
	memoryStoreEvictionPolicy：缓存对象清除策略。有三种：
	1. FIFO : first in first out ，这个是大家最熟的，先进先出，不多讲了
	2. LFU : Less Frequently Used ，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit 属性，hit 值最小的将会被清出缓存。
	3. LRU : Least Recently Used ，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。
 --> 
  <!-- 
  	ehcache 集群通过rmi组播 Multicast进行同步的，如果发现更新数据集群没有同步的话，可能原因：1、开启防火墙问题
	2、没有开启组播功能
	windows下默认是开启的。
	Linux下可能没有开启
	route add -net 224.0.0.0 netmask 240.0.0.0 dev eth1 
   -->
   
 	<!-- 采用 自动发现方式 实现缓存 群集 
 		multicastGroupAddress=230.0.0.1 的范围从 224.0.1.0 到 238.255.255.255 中的任何一个地址
 		<cacheManagerPeerProviderFactory class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory" 
		properties="peerDiscovery=automatic, multicastGroupAddress=230.0.0.1, multicastGroupPort=4446, timeToLive=32" />
 	-->
 	
	<cacheManagerPeerProviderFactory class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory" 
		properties="peerDiscovery=manual" />
	<cacheManagerPeerListenerFactory class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory" />
	
	<!-- 使用分布式缓存时 缓存区 overflowToDisk 和 diskPersistent 的值都必须设置为 false " 缓存 24小时 -->
	<defaultCache 
		maxElementsInMemory="2000" 
		memoryStoreEvictionPolicy="LFU" 
		maxEntriesLocalHeap="2000"
		timeToIdleSeconds="0" 
		timeToLiveSeconds="86400" 
		transactionalMode="off" 
		overflowToDisk="false" 
		diskPersistent="false" 
		eternal="false"/>
	
	<!-- 缓存全局缓存 -->
	<cache 
		name="GOLBAL_CACHE" 
		memoryStoreEvictionPolicy="LFU" 
		maxEntriesLocalHeap="2000"
		maxElementsInMemory="2000"
		timeToIdleSeconds="0" 
		timeToLiveSeconds="3600" 
		transactionalMode="off" 
		overflowToDisk="false" 
		diskPersistent="false" 
		eternal="false">
		<cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" />
	</cache>
	
	<cache 
		name="SYSTEM_CONSTANT_CACHE" 
		memoryStoreEvictionPolicy="LFU" 
		maxEntriesLocalHeap="5000"
		maxElementsInMemory="5000"
		timeToIdleSeconds="0" 
		timeToLiveSeconds="86400" 
		transactionalMode="off" 
		overflowToDisk="false" 
		diskPersistent="false" 
		eternal="false">
		<cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" />
	</cache>

  	<!-- 用户认证 缓存 -->
    <cache name="authenticationCache"
		maxElementsInMemory="1000"
		timeToLiveSeconds="3600"
		overflowToDisk="false"
		eternal="false">
		<cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" />
	</cache>
	
	<!-- 用户授权缓存 -->
	<cache name="authorizationCache"
		maxElementsInMemory="1000"
		timeToLiveSeconds="3600"
		overflowToDisk="false"
		eternal="false">
		<cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" />
	</cache>

</ehcache>
